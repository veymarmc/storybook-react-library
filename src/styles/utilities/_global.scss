:root {
  --medium-horizontal-padding: 1em;
  --medium-vertical-padding: 0.78571429em;
  --medium-border-radius: 0.28571429rem;
}

// Applying general styles only to the components
@mixin main-styles {
  box-sizing: border-box;
  margin: 0;
}

[class*="vmcrjc"], [class*="vmcrjc"] *:not(i) {
  @include main-styles;
}

[class*="vmcrjc"] {
  color: var(--color-text);
}

// Size names
$medium: medium;
$small: small;

@mixin padding($size) {
  $hp: var(--medium-horizontal-padding);
  $vp: var(--medium-vertical-padding);

  @if $size == $medium {
    padding: $vp $hp;
  } @else if $size == $small {
    padding: $vp*0.7 $hp*0.7
  }
}

@mixin fluid {
  width: 100%;
  display: block;
}

.fluid {
  @include fluid;
}

.underlined {
  text-decoration: underline;
}

// Display styles.
.d-none {
  display: none !important;
}
.d-flex {
  display: flex !important;
}

// flex styles
// justify content styles
$sb: sb;
$sa: sa;
$c: c;

$jc-rules: $sb, $sa, $c;

@mixin justify-content($type) {
  @extend .d-flex;

  @if $type == sb {
    justify-content: space-between !important;
  } @else if $type == sa{
    justify-content: space-around !important;
  } @else if $type == c {
    justify-content: center !important;
  }
}

@each $type in $jc-rules {
  .justify-content-#{$type} {
    @include justify-content($type);
  }
}

@mixin align-items($type) {
  @extend .d-flex;

  @if $type == c {
    align-items: center !important;
  }
}

@mixin d-center {
  @extend.d-flex;
  @include justify-content($c);
  @include align-items($c);
}
